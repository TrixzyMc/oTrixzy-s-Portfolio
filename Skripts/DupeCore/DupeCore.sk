# Options will be moved to config in the future!
# This bans item type & the item, therefore you can ban custom items.
## In the future this will support just items. Therefore if you ban ex. 64 of dirt, it will be banned for any amount! :)
### Simple Fix was made to ban ex. any amount of dirt, Using ItemTypes.
### This is a free, opensource, skript so don't expect a lot of support.
### Although if you do need support add me on discord: oTrixzy


options:
	exclusiveItemLore: &c&lEXCLUSIVE ITEM # Add this to any item that you want to be exclusive and not dupeable.
	allowUnbreakableItems: false
	
	# Prefixes
	prefix_success: &8[&a&l!&8] &8»&7
	prefix_error: &8[&c&l!&8] &8»&7
	prefix_warn: &8[&e&l!&8] &8»&7
	prefix_log: &8[&f&l!&8] &8»&7
	
	# Sounds
	sound_success: BLOCK.NOTE_BLOCK.PLING
	sound_error: BLOCK.NOTE_BLOCK.BASS
	sound_warning: ENTITY.BLAZE.HURT
	
	# API
	useCoreAPI: true # Required! Visit: https://github.com/TrixzyMc/oTrixzy-Portfolio/blob/portfolio/Skripts/MyAPI.sk for more information!
 
# Don't change under this, It is for config file use `plugin/Skript/scripts/oTrixzyAPI/config.json` to edit messages.
# For Experienced Users: addJsonProperty(<key>, <value>)
on load: 
	addJsonProperty("prefix", "&6&lSERVER&e&lNAME &8»&7")
	addJsonProperty("cooldown_message", "<prefix> You are currently on cooldown for &b<cooldown> seconds&7!")
	addJsonProperty("duped_success_message", "<prefix> Your item has been duped &b<amount> times&7!")
	addJsonProperty("duped_error_message", "<prefix> Your item cannot be duped!")
	addJsonProperty("no_dupe_perms", "<prefix> You do not have permission to do &b<amount> times!")
	addJsonProperty("contains_banned_items_message", "<prefix> Your item cannot be duped because it contains banned items!")
	addJsonProperty("cannot_dupe_air_message", "<prefix> You cannot dupe air.")
	
function blacklistLore(p: player, t: text):
	if {_t} is "":
		send "{@prefix_error} You cannot blacklist no lore." to {_p}
		play sound "{@sound_error}" to {_p}
		stop
		
	if {dupecore::BlacklistedLores::*} contains {_t}:
		send "{@prefix_error} This lore is already blacklisted, Thus you cannot blacklist this lore again." to {_p}
		play sound "{@sound_error}" to {_p}
		stop
	
	send "{@prefix_success} Added &e""%{_t}%&e"" &7to the blacklisted lores." to {_p}
	add {_t} to {dupecore::BlacklistedLores::*}
	play sound "{@sound_success}" to {_p}
	
function removeBlacklistedLore(p: player, t: text):
	if {dupecore::BlacklistedLores::*} does not contain {_t}:
		send "{@prefix_warn} This lore is not a Valid Lore." to {_p}
		play sound "{@sound_warning}" to {_p}
		stop
	
	remove {_p}'s held item from {dupecore::BlacklistedLores::*}
	send "{@prefix_success} %type of {_p}'s held item% has been removed from the blacklisted items!" to {_p}
	play sound "{@sound_success}" to {_p}

function clearBlacklistedLore(p: player, override: boolean=false):
	set {dupecore::RevertChanges} to false
	send "{@prefix_warn} All blacklisted lores are about to be cleared!" to {_p} if {_override} is false
	send "{@prefix_warn} You have &b30 Seconds&7 till changes are completed!%nl%{@prefix_warn} &6/admindupe cancel &7to cancel this action" to {_p} if {_override} is false
	play sound "{@sound_success}" to {_p}
	set {_delay} to 0 if {_override} is false
	set {_delay} to 30 if {_override} is true
	if {_override} is false:
		while {dupecore::RevertChanges} is set:
			exit loop if {_delay} is 30
			add 1 to {_delay}
			set {_prefix::*} to "{@prefix_warn}" split at " "
			send title "%{_prefix::1}%" with subtitle "&7All Blacklisted Lores are about to be cleared,&6 /admindupe cancel &7to cancel" to {_p} for 1 second
			play sound "{@sound_warning}" with volume 0.75 and pitch (random number between 0.5 and 0.75) to {_p}
			wait 1 second
		
	if {dupecore::RevertChanges} is set:
		delete {dupecore::BlacklistedLores::*}
		delete {dupecore::RevertChanges}
		send "{@prefix_success} All Blacklisted Lores have been cleared!" to {_p}
		
function listBlacklistedLores(p: player):
	send "&8[&6-----&e&lBLACKLISTED LORES&6-----&8]" to {_p}
	send "" to {_p}
	
	set {_lores::*} to "%{dupecore::BlacklistedLores::*}%" split at ", "
	set {_lores::*} to "%{_lores::*}%" split at " and "
	
	loop {_lores::*}:
		send "&6%loop-index%&7: %loop-value%" to {_p}
	
	send "" to {_p}
	send "&8[&6-----&e&l----------------&6-----&8]" to {_p}

# Item Manager

function blacklistItem(p: player):
	if {_p}'s held item is air:
		send "{@prefix_error} You cannot blacklist air!" to {_p}
		play sound "{@sound_error}" to {_p}
		stop
	
	if {dupecore::BlacklistedItems::*} contains {_p}'s held item:
		send "{@prefix_warn} %type of {_p}'s held item% is already blacklisted!" to {_p}
		play sound "{@sound_error}" to {_p}
		stop
	
	add {_p}'s held item to {dupecore::BlacklistedItems::*}
	send "{@prefix_success} %type of {_p}'s held item% has been added to the blacklisted items!" to {_p}
	play sound "{@sound_success}" to {_p}
	
function removeBlacklistedItem(p: player):
	if {_p}'s held item is air:
		send "{@prefix_log} Air cannot be blacklisted, Thus you cannot remove it from the blacklist!" to {_p}
		play sound "{@sound_error}" to {_p}
		stop
	
	if {dupecore::BlacklistedItems::*} does not contain {_p}'s held item:
		send "{@prefix_warn} %type of {_p}'s held item% is not blacklisted!" to {_p}
		play sound "{@sound_error}" to {_p}
		stop
	
	remove {_p}'s held item from {dupecore::BlacklistedItems::*}
	send "{@prefix_success} %type of {_p}'s held item% has been removed from the blacklisted items!" to {_p}
	play sound "{@sound_success}" to {_p}

function clearBlacklistedItems(p: player, override: boolean=false):
	set {dupecore::RevertChanges} to false
	send "{@prefix_warn} All Blacklisted Items are about to be cleared!" to {_p} if {_override} is false
	send "{@prefix_warn} &7You have &b30 seconds&7 till changes are complete!%nl%{@prefix_warn} &6/admindupe cancel &7to cancel this action" to {_p} if {_override} is false
	play sound "{@sound_success}" to {_p} 
	set {_delay} to 0 if {_override} is false
	set {_delay} to 30 if {_override} is true
	if {_override} is false:
		while {dupecore::RevertChanges} is set:
			exit loop if {_delay} is 30
			add 1 to {_delay}
			set {_prefix::*} to "{@prefix_warn}" split at " "
			send title "%{_prefix::1}%" with subtitle "&7All Blacklisted Items are about to be cleared,&6 /admindupe cancel &7to cancel" to {_p} for 1 second
			play sound "{@sound_warning}" with volume 0.75 and pitch (random number between 0.5 and 0.75) to {_p}
			wait 1 second
			
	if {dupecore::RevertChanges} is set:
		delete {dupecore::BlacklistedItems::*}
		delete {dupecore::RevertChanges}
		send "{@prefix_success} All Blacklisted Items have been cleared!" to {_p}

function listBlacklistedItems(p: player):
	send "&8[&6-----&e&lBLACKLISTED ITEMS&6-----&8]" to {_p}
	send "" to {_p}
	set {_items::*} to "%{dupecore::BlacklistedItems::*}%" split at ", "
	loop {_items::*}:
		send "&6%loop-index%&7: %type of loop-value%" to {_p}
	
	send "" to {_p}
	send "&8[&6-----&e&l----------------&6-----&8]" to {_p}
	
function getLoresFromItems(items: object) :: strings:
	loop {_items::*}:
		exit loop if loop-value is air
		add lore of loop-value to {_lores::*}

	return {_lores::*}
    
function getBlacklistedLores() :: strings:
	loop {dupecore::BlacklistedLores::*}:
		exit loop if loop-value is not set
		add loop-value to {_lores::*}
	
	return {_lores::*}
	
function dupePlayersItem(p: player, amount: integer=1):: integer:
	if getCommandCooldown({_p}) is set:
		setCommandCooldown({_p})
		stop
	if {_p} does not have permission "dupe.%{_amount}%":
		send readJsonData("no_dupe_perms", {_p}) to {_p}
		stop
	
	if {_p}'s held item is air:
		send readJsonData("cannot_dupe_air_message", {_p}) to {_p}
		stop
	
	if "%{dupecore::BlacklistedItems::*}%" contains "%type of {_p}'s held item%":
		send readJsonData("duped_error_message", {_p}) to {_p}
		stop
		
	if {dupecore::BlacklistedItems::*} contains {_p}'s held item:
		send readJsonData("duped_error_message", {_p}) to {_p}
		stop
	
	loop (size of getBlacklistedLores()) times:
		if (lore of {_p}'s held item) contains {_blacklistedLores::%loop-value%}:
			send readJsonData("duped_error_message", {_p}) to {_p}
			stop
	
	if {_p}'s held item is unbreakable:
		if {@allowUnbreakableItems} is false:
			send readJsonData("duped_error_message", {_p}) to {_p}
			stop
	
	set {_items::*} to the inventory of {_p}'s held item
	loop {_items::*}:
		if loop-value is not air:
			add loop-value to {_itemsLore::*}
	set {_bannedItems} to true if {dupecore::BlacklistedItems::*} contains {_items::*}
	
	set {_bannedItems} to true if {_itemsLore::*} contains getBlacklistedLores()
	set {_bannedItems} to true if {_items::*} is unbreakable
	if {_bannedItems} is true:
		send readJsonData("contains_banned_items_message", {_p}) to {_p}
		stop
	
	set {_item} to {_p}'s held item
	set {_amountOfItem} to (amount of {_item} * {_amount})
	
	set {_message} to "%readJsonData("duped_success_message", {_p})%"
	
	
	send replaceInMessage({_message}, "<amount>", "%{_amountOfItem}%") to {_p}
	return {_amountOfItem}

command /dupe [<integer>]:
	trigger:
		if arg-1 is set:	
			give player dupePlayersItem(player, arg-1) of player's held item 
			stop
		
		give player dupePlayersItem(player) of player's held item
		
		
command /admindupe [<text>] [<text>] [<text>] [<text>]:
	permission: dupe.admin
	permission message: &cYou do not have permissions to perform this action.
	trigger:
		if arg-1 is not set:
			send "     &8[&6-----&e&lADMIN DUPE&6-----&8]" to player
			send "" to player
			send "&8[&9----- &b&lBLACKLIST LORES&9 -----&8]" to player
			send "" to player
			send "&6- &f/admindupe blacklist add" to player
			send "&6- &f/admindupe blacklist remove" to player
			send "&6- &f/admindupe blacklist clear <override>" to player
			send "&6- &f/admindupe blacklist list" to player
			send "" to player
			send "&8[&9----- &b&lBLACKLIST LORES&9 -----&8]" to player
			send "" to player
			send "&6- &f/admindupe blacklist lore add"
			send "&6- &f/admindupe blacklist lore remove"
			send "&6- &f/admindupe blacklist lore clear <override>"
			send "&6- &f/admindupe blacklist lore list"
			send "" to player
			send "     &8[&6-----&e&l---------&6-----&8]" to player
			stop
		
		if arg-1 is "blacklist":
			if arg-2 is "add":
				blacklistItem(player)
				stop
			
			else if arg-2 is "remove":
				removeBlacklistedItem(player)
				stop
			
			if arg-2 is "clear":
				if arg-3 is "override":
					clearBlacklistedItems(player, true)
					stop
				clearBlacklistedItems(player)
			
			if arg-2 is "list":
				listBlacklistedItems(player)
				stop
				
			if arg-2 is "lore":
				if arg-3 is "add":
					blacklistLore(player, "%arg-4%")
					
				if arg-3 is "remove":
					removeBlacklistedLore(player, arg-4)
					
				if arg-3 is "clear":
					if arg-4 is "override":
						clearBlacklistedLore(player, true)
						stop
					clearBlacklistedLore(player)
					
				if arg-3 is "list":
					listBlacklistedLores(player)
				
		if arg-1 is "cancel":
			if {dupecore::RevertChanges} is set:
				send "{@prefix_success} Changes have been reverted." to player
				delete {dupecore::RevertChanges}
			else:
				send "{@prefix_error} No changes we're found." to player
				send "{@prefix_success} If there we're any changes they should be reverted or stopped." to player
				delete {dupecore::RevertChanges}
		
on tab complete of "/admindupe":
	set tab completions for position 1 to "blacklist", "cancel"
	set tab completions for position 2 to "add", "remove", "clear", "list", "lore"
	if tab arg-2 is "lore":
		set tab completions for position 3 to "add", "remove", "clear", "list", "lore"
		if tab arg-2 is not "list" or "clear":
			set tab completions for position 4 to "ExampleLore"
			
		if tab arg-2 is "clear":
			set tab completions for position 4 to "override"
	
	if tab arg-2 is "clear":
		set tab completions for position 3 to "override"
