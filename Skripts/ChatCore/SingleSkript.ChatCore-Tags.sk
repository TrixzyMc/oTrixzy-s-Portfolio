# ------------------------------------------------------------------
# ----------------------- Official Rewrite -----------------------
# ------------------------ CREATOR: oTrixzy ------------------------
# -------------------------- Version: 1.0 --------------------------
# -------------------- Released Date: 7/21/2024 --------------------
# ----------------------- Github: github.com/TrixzyMc/oTrixzy-Portfolio/  -----------------------
# ------------------------------------------------------------------

# [!] -- Do not touch this, Deleting fixes a bug. We will give you support if you touched it. -- [!]

on load:
    delete {-ChatCore::ChatColor::Registered::*} 
    send "&e&lChatCore-Color &8- &fWe have detected a reload, Therefore we reloaded the colors. Do not be scared, This is not a bug or anything. " to all players where [input has permission "ChatCore;Admin"]

# [!] Do not move this up, You shall touch. [!]

on load:
    registerColor(1, "White", "chatCore.color.white", "<##ffffff>")
    registerColor(2, "Red", "chatCore.color.red", "<##FF0000>")
    registerColor(3, "Orange", "chatCore.color.orange", "<##FFA500>")
    registerColor(4, "Yellow", "chatCore.color.yellow", "<##FFFF00>")
    registerColor(5, "Green", "chatCore.color.green", "<##008000>")
    registerColor(6, "Blue", "chatCore.color.blue", "<##0000FF>")
    registerColor(7, "Purple", "chatCore.color.purple", "<##800080>")
    registerColor(8, "Pink", "chatCore.color.pink", "<##FFC0CB>")
    registerColor(9, "Brown", "chatCore.color.Brown", "<##A52A2A>")
    registerColor(10, "Gray", "chatCore.color.Gray", "<##808080>")
    registerColor(11, "Silver", "chatCore.color.Silver", "<##C0C0C0>")
    registerColor(12, "Gold", "chatCore.color.Gold", "<##FFD700>")
    registerColor(13, "Beige", "chatCore.color.Beige", "<##F5F5DC>")
    registerColor(14, "Turquoise", "chatCore.color.Turquoise", "<##40E0D0>")
    registerColor(15, "Maroon", "chatCore.color.Maroon", "<##800000>")
    registerColor(16, "Indigo", "chatCore.color.Indigo", "<##4B0082>")
    registerColor(17, "Lavender", "chatCore.color.Lavender", "<##E6E6FA>")
    registerColor(18, "Teal", "chatCore.color.Teal", "<##008080>")
    registerColor(19, "Cyan", "chatCore.color.Cyan", "<##00FFFF>")
    registerColor(20, "Solid Blue", "chatCore.color.solidBlue", "<##008BFF>")
    registerColor(21, "Blue Ice", "chatCore.color.gradientBlue", "<gradient:##A9FFFF:##00AAFF>")

function registerColor(id: integer, name: string, requiredPermission: string, colorHex: string):

    set {-ChatCore::ChatColor::Registered::%{_id}%} to true

    set {-ChatCore::ChatColor::Registered::%{_id}%::name} to {_name}
    set {-ChatCore::ChatColor::Registered::%{_id}%::color} to {_colorHex}
    set {-ChatCore::ChatColor::Registered::%{_id}%::lore} to " %{_colorHex}%<bold>| %{_colorHex}%Lore Coming Soon..."
    set {-ChatCore::ChatColor::Registered::%{_id}%::requiredPermission} to {_requiredPermission}


function ChatColor(p: player, page: number=1):
    create a gui with virtual chest inventory with 5 rows named "ChatColor (Page ##%{_page}%)":
        make gui slot (all integers between 0 and 44) with black stained glass pane named "&7" with all item flags 
        make gui slot (all integers between 10 and 16, all integers between 19 and 25, all integers between 28 and 34) with stone button named "&7" with all item flags
        make gui slot 4 with knowledge book named "" with all item flags
        set {_start_index} to ({_page} - 1) * 21 + 1
        set {_end_index} to {_page} * 21
        
        if {_page} > 1:
            make gui slot 36 with strong healing tipped arrow named "&cʙᴀᴄᴋ ᴘᴀɢᴇ" with all item flags:
                ChatColor({_p}, ({_page} - 1))

        set {_slot} to 10

        loop all integers between {_start_index} and {_end_index}:
            exit loop if {-ChatCore::ChatColor::Registered::%loop-value%} is not set
            set {_color} to {-ChatCore::ChatColor::Registered::%loop-value%::color}
            
            if {-ChatCore::ChatColor::Registered::%loop-value%::color} contains "gradient":
                set {_text} to mini message from "%{_color}%%{-ChatCore::ChatColor::Registered::%loop-value%::name}%"
            else:
                set {_text} to "%{_color}%%{-ChatCore::ChatColor::Registered::%loop-value%::name}%"
            
            if {_p} has permission "%{-ChatCore::ChatColor::Registered::%loop-value%::requiredPermission}%":
                make gui slot {_slot} with nametag of mending named "%{_text}%" with all item flags:
                    set {-ChatCore::ChatColor::PlayerColor::%{_p}'s uuid%} to {_color}
                    close player's inventory
                    send action bar "&e&lChatCore &8- &fSet your Chat Color to %{_text}%!"
                    
            add 1 to {_slot}
            
            if loop-value >= 21:
                make gui slot 44 with strong swiftness tipped arrow named "&bɴᴇxᴛ ᴘᴀɢᴇ" with all item flags:
                    ChatColor({_p}, ({_page} + 1))
            
            if {_slot} = 17 or 26 or 35:
                add 2 to {_slot}

    open last gui to {_p}

on chat:
    set {-ChatCore::ChatColor::PlayerColor::%player's uuid%} to "&7" if {-ChatCore::ChatColor::PlayerColor::%player's uuid%} is not set
    loop all players:
        if message contains "%loop-player%":
            replace "%loop-player%" with "&e&l@%loop-player%%{-ChatCore::ChatColor::PlayerColor::%player's uuid%}%" in message
            play sound "BLOCK_NOTE_BLOCK_PLING" with volume 0.4 and pitch 1 to loop-player
        
        if {-ChatCore::ChatColor::PlayerColor::%player's uuid%} contains "gradient":
            replace message with mini message from "%{-ChatCore::ChatColor::PlayerColor::%player's uuid%}%%message%" in message
        else:
            replace message with "%{-ChatCore::ChatColor::PlayerColor::%player's uuid%}%%message%" in message
            

command /chatcolor:
    trigger:
        ChatColor(player)