# ------------------------------------------------------------------
# ----------------------- Official Rewrite -----------------------
# ------------------------ CREATOR: oTrixzy ------------------------
# -------------------------- Version: 1.0 --------------------------
# -------------------- Released Date: 7/21/2024 --------------------
# ----------------------- Github: github.com/TrixzyMc/oTrixzy-Portfolio/  -----------------------
# ------------------------------------------------------------------

on load:
    delete {-ChatCore::ChatColor::Registered::*}  ## KEEP THIS
    delete {-ChatCore::ChatTags::Registered::*} ## KEEP THIS
    send "&e&lChatCore-AllInOne &8- &fWe have detected a reload, Therefore we reloaded Everything. Do not be scared, This is not a bug or anything. " to all players where [input has permission "ChatCore.Admin"]

# [!] Do not move this up, You shall touch. [!]

on load:
    # NonGradient: registerTag(1, "White", "chatCore.color.white", "<#Hexcode> or <##hexcode>") Permission can be anything you want.
    # Gradient: registerColor(2, "Blue Ice", "chatColor.gradientBlue", "<gradient:##A9FFFF:##00AAFF>")
    registerColor(1, "White", "chatCore.color.white", "<##ffffff>")
    registerColor(2, "Blue Ice", "chatColor.gradientBlue", "<gradient:##A9FFFF:##00AAFF>")

    # NonGradient: registerTag(1, "&8[&7ExampleTag&8]", "chatCore.tags.ExampleTag") Permission can be anything you want.
    # Gradient: registerTag(2, "<gradient:##A9FFFF:##00AAFF>[Gradient Test]", "chatCore.Tags.Gradien-test")

    registerTag(1, "&8[&eELITE&8]", "chatCore.tags.Elite")
    registerTag(2, "<gradient:##A9FFFF:##00AAFF>[Gradient Test]", "chatCore.Tags.Gradien-test")

    # --->> DO NOT TOUCH BELOW, SUPPORT WILL NOT BE GIVEN. <<--- ##

# --> Functions to register Color / Tags. <-- #
function registerColor(id: integer, name: string, requiredPermission: string, colorHex: string):

    set {-ChatCore::ChatColor::Registered::%{_id}%} to true

    set {-ChatCore::ChatColor::Registered::%{_id}%::name} to {_name}
    set {-ChatCore::ChatColor::Registered::%{_id}%::color} to {_colorHex}
    set {-ChatCore::ChatColor::Registered::%{_id}%::lore} to " %{_colorHex}%<bold>| %{_colorHex}%Lore Coming Soon..."
    set {-ChatCore::ChatColor::Registered::%{_id}%::requiredPermission} to {_requiredPermission}

function registerTag(id: integer, tag: string, required-permission: string):
    set {-ChatCore::ChatTags::Registered::%{_id}%} to true

    set {-ChatCore::ChatTags::Registered::%{_id}%::name} to {_tag}
    set {-ChatCore::ChatTags::Registered::%{_id}%::requiredPermission} to {_required-permission}

# --> Functions to create GUIS <-- #

function ChatTags(p: player, page: number=1):
    create a gui with virtual chest inventory with 5 rows named "ChatTags (Page ##%{_page}%)":
        make gui slot (all integers between 0 and 44) with black stained glass pane named "&7" with all item flags 
        make gui slot (all integers between 10 and 16, all integers between 19 and 25, all integers between 28 and 34) with stone button named "&7" with all item flags
        make gui slot 4 with knowledge book named "" with all item flags
        set {_start_index} to ({_page} - 1) * 21 + 1
        set {_end_index} to {_page} * 21
        
        if {_page} > 1:
            make gui slot 36 with strong healing tipped arrow named "&cʙᴀᴄᴋ ᴘᴀɢᴇ" with all item flags:
                ChatTags({_p}, ({_page} - 1))

        set {_slot} to 10

        loop all integers between {_start_index} and {_end_index}:
            exit loop if {-ChatCore::ChatTags::Registered::%loop-value%} is not set
            
            if {-ChatCore::ChatTags::Registered::%loop-value%::name} contains "gradient":
                set {_text} to mini message from "%{-ChatCore::ChatTags::Registered::%loop-value%::name}%"
            else:
                set {_text} to "%{-ChatCore::ChatTags::Registered::%loop-value%::name}%"
            
            if {_p} has permission "%{-ChatCore::ChatTags::Registered::%loop-value%::requiredPermission}%":
                make gui slot {_slot} with nametag of mending named "%{_text}%" with all item flags:
                    set player's suffix to "%{_text}%"
                    close player's inventory
                    send action bar "&e&lChatCore-Tags &8- &fSet your Chat Tag to %{_text}%!"
                    
            add 1 to {_slot}
            
            if loop-value >= 21:
                make gui slot 44 with strong swiftness tipped arrow named "&bɴᴇxᴛ ᴘᴀɢᴇ" with all item flags:
                    ChatTags({_p}, ({_page} + 1))
            
            if {_slot} = 17 or 26 or 35:
                add 2 to {_slot}

    open last gui to {_p}

function ChatColor(p: player, page: number=1):
    create a gui with virtual chest inventory with 5 rows named "ChatColor (Page ##%{_page}%)":
        make gui slot (all integers between 0 and 44) with black stained glass pane named "&7" with all item flags 
        make gui slot (all integers between 10 and 16, all integers between 19 and 25, all integers between 28 and 34) with stone button named "&7" with all item flags
        make gui slot 4 with knowledge book named "" with all item flags
        set {_start_index} to ({_page} - 1) * 21 + 1
        set {_end_index} to {_page} * 21
        
        if {_page} > 1:
            make gui slot 36 with strong healing tipped arrow named "&cʙᴀᴄᴋ ᴘᴀɢᴇ" with all item flags:
                ChatColor({_p}, ({_page} - 1))

        set {_slot} to 10

        loop all integers between {_start_index} and {_end_index}:
            exit loop if {-ChatCore::ChatColor::Registered::%loop-value%} is not set
            set {_color} to {-ChatCore::ChatColor::Registered::%loop-value%::color}
            
            if {-ChatCore::ChatColor::Registered::%loop-value%::color} contains "gradient":
                set {_text} to mini message from "%{_color}%%{-ChatCore::ChatColor::Registered::%loop-value%::name}%"
            else:
                set {_text} to "%{_color}%%{-ChatCore::ChatColor::Registered::%loop-value%::name}%"
            
            if {_p} has permission "%{-ChatCore::ChatColor::Registered::%loop-value%::requiredPermission}%":
                make gui slot {_slot} with nametag of mending named "%{_text}%" with all item flags:
                    set {-ChatCore::ChatColor::PlayerColor::%{_p}'s uuid%} to {_color}
                    close player's inventory
                    send action bar "&e&lChatCore &8- &fSet your Chat Color to %{_text}%!"
                    
            add 1 to {_slot}
            
            if loop-value >= 21:
                make gui slot 44 with strong swiftness tipped arrow named "&bɴᴇxᴛ ᴘᴀɢᴇ" with all item flags:
                    ChatColor({_p}, ({_page} + 1))
            
            if {_slot} = 17 or 26 or 35:
                add 2 to {_slot}

    open last gui to {_p}

# --> Chat Color Handler + Player To Message <-- #
on chat:
    set {-ChatCore::ChatColor::PlayerColor::%player's uuid%} to "&7" if {-ChatCore::ChatColor::PlayerColor::%player's uuid%} is not set
    loop all players:
        if message contains "%loop-player%":
            replace "%loop-player%" with "&e&l@%loop-player%%{-ChatCore::ChatColor::PlayerColor::%player's uuid%}%" in message
            play sound "BLOCK_NOTE_BLOCK_PLING" with volume 0.4 and pitch 1 to loop-player
        
        if {-ChatCore::ChatColor::PlayerColor::%player's uuid%} contains "gradient":
            replace message with mini message from "%{-ChatCore::ChatColor::PlayerColor::%player's uuid%}%%message%" in message
        else:
            replace message with "%{-ChatCore::ChatColor::PlayerColor::%player's uuid%}%%message%" in message
            
# --> Commands <-- #
command /chatcolor:
    trigger:
        ChatColor(player)

command /tags:
    trigger:
        ChatTags(player)
